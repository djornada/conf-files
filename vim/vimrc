call plug#begin()

Plug 'ctrlpvim/ctrlp.vim'
Plug 'digitaltoad/vim-pug', {'for': 'jade'}
Plug 'editorconfig/editorconfig-vim'
Plug 'elzr/vim-json', {'for': 'json'}
Plug 'honza/vim-snippets'
Plug 'justinmk/vim-syntax-extra', {'for': 'c'}
Plug 'keith/rspec.vim', {'for': 'ruby'}
Plug 'lervag/vimtex'
Plug 'majutsushi/tagbar'
Plug 'mhinz/vim-signify'
Plug 'mileszs/ack.vim'
Plug 'mxw/vim-jsx', {'for': 'javascript'}
Plug 'othree/yajs.vim', {'for': 'javascript'}
Plug 'raimondi/delimitmate'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'scrooloose/syntastic'
Plug 'shougo/neocomplete'
Plug 'shougo/neosnippet'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml', {'for': 'haml'}
Plug 'tpope/vim-markdown', {'for': 'markdown'}
Plug 'tpope/vim-rails', {'for': 'ruby'}
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'wakatime/vim-wakatime'
Plug 'whatyouhide/vim-gotham'

call plug#end()

autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost *.tex set filetype=tex

let g:jsx_ext_required = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_enable_signs = 1
let g:syntastic_quiet_messages = {'level': 'warnings'}

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

let g:neosnippet#disable_runtime_snippets = {'_': 1}
let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'

let g:airline_powerline_fonts=1
"let g:airline#extensions#tabline#enabled = 1

let mapleader = ','
let g:ackprg = 'ag --vimgrep'

nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader>q :q<cr>
nnoremap <leader>w :w!<cr>
nnoremap <space> /

xmap <TAB>     <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

colorscheme gotham

set ai
set cursorline
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=trail:·,tab:»\ ,eol:↲
set ls=2
set magic
set noexpandtab
set nosmartindent
set number
set ruler
set shiftround
set shiftwidth=4
set smartcase
set splitbelow
set splitright
set tabstop=4
set wildignore=*.o,*.obj,*~,node_modules
set wildmenu

if has('conceal')
	set conceallevel=2 concealcursor=niv
endif

syntax on

"gvim stuff
set guioptions-=m "remove menu bar
set guioptions-=T "remove tool bar
set guioptions-=r "remove right hand scroll bar
set guioptions-=L "remove left hand scroll bar
