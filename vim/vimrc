call plug#begin()

Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'editorconfig/editorconfig-vim'
Plug 'honza/dockerfile.vim'
Plug 'honza/vim-snippets'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-signify'
Plug 'mxw/vim-jsx', {'for': 'javascript'}
Plug 'neoclide/coc.nvim', {'do': './install.sh'}
Plug 'nlknguyen/papercolor-theme'
Plug 'othree/yajs.vim', {'for': 'javascript'}
Plug 'raimondi/delimitmate'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'tpope/vim-markdown', {'for': 'markdown'}
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'w0rp/ale'

call plug#end()

let $FZF_DEFAULT_COMMAND = 'rg --files --hidden'

let g:jsx_ext_required = 0
let g:syntastic_auto_loc_list = 1

let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_sign_error = '●'
let g:ale_sign_warning = '.'
let g:ale_lint_on_enter = 0
let g:ale_linters = {'javascript': ['standard']}
let g:ale_fixers = {'javascript': ['standard']}

let mapleader = ','

nnoremap <C-p> :Files<Cr>
nnoremap <C-g> :Rg<Cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>q :q<cr>
nnoremap <leader>w :w!<cr>
nnoremap <leader>w :w!<cr>
nnoremap <leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>
nnoremap <space> /

colorscheme PaperColor

set ai
set autoread
set background=dark
set cmdheight=2
set cursorline
set hidden
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=trail:·,tab:»\ ,eol:↲
set ls=2
set magic
set nobackup
set noexpandtab
set noshowmode
set nosmartindent
set nowritebackup
set number
set ruler
set shiftround
set shiftwidth=4
set shortmess+=c
set signcolumn=yes
set smartcase
set splitbelow
set splitright
set tabstop=4
set updatetime=300
set wildignore=*.o,*.obj,*~,node_modules
set wildmenu

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if has('conceal')
	set conceallevel=2 concealcursor=niv
endif


syntax on

set guioptions-=m "remove menu bar
set guioptions-=T "remove tool bar
set guioptions-=r "remove right hand scroll bar
set guioptions-=L "remove left hand scroll bar
